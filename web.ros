#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  (ignore-errors
    (load "roswell.github.utils.asd")
    (ql:quickload '(:roswell.github.utils) :silent t))
  #+quicklisp(ql:quickload '(:dexador :jonathan) :silent t))

(defpackage :ros.script.web.3788143716
  (:use :cl))
(in-package :ros.script.web.3788143716)

(defvar *version* nil)

(defun env (name)
  (let ((val (ros:getenv name)))
    (unless (zerop (length val))
      val)))

(defun version-target (&key (target :compiler))
  (values (or *version*
              (env "TRAVIS_TAG")
              (env "APPVEYOR_REPO_TAG_NAME")
              (let ((version (env "VERSION")) )
                (if (equal "99.99.99" version)
                    nil
                    version))
              (let ((branch (env "TRAVIS_BRANCH")))
                (unless (equal "master" branch)
                  branch))
              nil)
          (let ((m (or (env "ARCH")
                       (roswell.util:uname-m))))
            (cond ((and (equal m "armhf")
                        (eql target :compiler))
                   "arm")
                  ((and (not (eql target :compiler))
                        (equal m "arm"))
                   "armhf")
                  (t m)))
          (or (env "SUFFIX")
              "")
          (or (env "UNAME")
              (roswell.util:uname))))

(defun account ()
  (values
   (or (env "GH_USER") (symbol-value (uiop:safe-read-from-string "roswell.github.utils:*user*")))
   (or (env "GH_REPO") (symbol-value(uiop:safe-read-from-string "roswell.github.utils:*repo*")))))

(export
 (defun upload (files &key (interactive t))
   (multiple-value-bind (version target suffix uname)
       (version-target)
     (multiple-value-bind (user repo)
         (account)
       (format t "version:~A target:~A suffix:~A uname:~A user:~A repo:~A ~%" version target suffix uname
               user repo)
       (when (or (not interactive)
                 (yes-or-no-p "upload files:~%~{~S~%~}~%~%OK?" files))
         (dolist (file files)
           (loop repeat 10
                 until (ignore-errors
                         (uiop:symbol-call :roswell.github.utils :github
                                           file version user repo t))
                 do (sleep 3))))))))

(export
 (defun upload-archive (args)
   (declare (ignore args))
   (multiple-value-bind (version target suffix uname)
       (version-target :target :archive)
     (let* ((release (and version (< (length version) 20)))
            (path (print (format nil "sbcl-~A-~A-~A~A-binary"
                                 version
                                 target
                                 uname
                                 suffix))))
       (when release
         (ql:quickload :sb-md5)
         (let ((file (or (env "FILE")
                        (format nil (if (equal uname "windows") "~A.msi" "~A.tar.bz2")
                                path))))
           (cond ((probe-file file)
                  (format t "~(~{~2,'0X~}~)"
                          (map 'list #'identity (funcall (read-from-string "sb-md5:md5sum-file") file)))
                  (multiple-value-bind (user repo)
                      (account)
                    (uiop:symbol-call :roswell.github.utils :github
                                      file version user repo nil)))
                 (t
                  (format t "file not found:~A~%" file)
                  (uiop:quit 1)))))))))

(defun releases ()
  (multiple-value-bind (user repo)
      (account)
    (jojo:parse (dex:get (format nil "https://api.github.com/repos/~A/~A/releases" user repo)))))

(defun latest-relase ()
  (multiple-value-bind (user repo)
      (account)
    (jojo:parse (dex:get (format nil "https://api.github.com/repos/~A/~A/releases/latest" user repo)))))

(defun release-uris (&optional (release (latest-relase)))
  (loop for asset in (getf release :|assets|)
        ;;when (find (getf asset :|content_type|) '("application/x-bzip2" "application/x-msi") :test 'equal)
        collect (getf asset :|browser_download_url|)))

(defun release-tag_name (&optional (release (latest-relase)))
  (getf release :|tag_name|))

(defun tsv-uri (&optional (release (latest-relase)))
  (multiple-value-bind (user repo)
      (account)
    (format nil "https://github.com/~A/~A/releases/download/~A/sbcl-bin_uri.tsv"
            user repo
            (release-tag_name release))))

(defun parse-tsv (string)
  (mapcar (lambda (x) (uiop:split-string x :separator '(#\tab)))
          (uiop:split-string string :separator '(#\lf))))

(defun save-tsv (file tsv)
  (with-open-file (out file :direction :output :if-exists :supersede)
    (format out "~{~{~A~^	~}~^~%~}" tsv)))

(defun modify-tsv (tsv release)
  (loop with tag-name = (release-tag_name release)
        with comp = (lambda (x) (ignore-errors (aref (nth-value 1 (ppcre:scan-to-strings "sbcl-[^-]*-([^/]*)$" x)) 0)))
        for uri in (remove-if-not (lambda (x) (ppcre:scan "binary" x))
                                  (release-uris release))
        for found = (find uri tsv :test #'(lambda (x y)
                                            (equal (funcall comp x)
                                                   (funcall comp (fifth y)))))
        do (if found
               (setf (fifth found) uri
                     (third found) tag-name)
               (format t "unlisted uri: ~S~%" uri)))
  tsv)

(defun updated-tsv ()
  (let* ((releases (releases))
         (tsv (or (ignore-errors (parse-tsv (dex:get (tsv-uri (second releases)) :force-string t)))
                  ;; download second new release's tsv or upload current tsv.
                  (let ((*version* (release-tag_name (second releases)))
                        (result (parse-tsv (tsv-get "files"))))
                    (save-tsv "sbcl-bin_uri.tsv" result)
                    (upload-tsv nil)
                    result))))
    (mapc (lambda (x) (modify-tsv tsv x)) (reverse releases))
    (setf (rest tsv) (sort (rest tsv) (complement #'uiop/version:version<) :key #'third))
    tsv))

(export
 (defun tsv (args)
   (declare (ignore args))
   (save-tsv "sbcl-bin_uri.tsv" (updated-tsv))))

(defun tsv-get (&optional (version "files"))
  (dex:get (format nil "https://github.com/roswell/sbcl_bin/releases/download/~A/sbcl-bin_uri.tsv" version)
           :force-string t))

(export
 (defun get-tsv (args)
   (declare (ignore args))
   (multiple-value-bind (version)
       (version-target :target :archive)
     (with-open-file (o "sbcl-bin_uri.tsv" :direction :output :if-exists :supersede)
       (format o "~A" (tsv-get (or version "files")))))))

(export
 (defun upload-tsv (args)
   (declare (ignore args))
   (multiple-value-bind (version)
       (version-target :target :archive)
     (let ((path "sbcl-bin_uri.tsv"))
       (progn
         (ql:quickload :sb-md5)
         (cond ((probe-file path)
                (let* ((version (or version "files"))
                       (new (format nil "~(~{~2,'0X~}~)"
                                    (map 'list #'identity (funcall (read-from-string "sb-md5:md5sum-file") path))))
                       (old (ignore-errors
                              (format nil "~(~{~2,'0X~}~)"
                                      (map 'list #'identity (funcall (read-from-string "sb-md5:md5sum-string")
                                                                     (tsv-get version)))))))
                  (format t "new:~A~%old:~A~%" new old)
                  (multiple-value-bind (user repo)
                      (account)
                    (unless (equal new old)
                      (uiop:symbol-call :roswell.github.utils :github
                                        path version user repo t)))))
               (t
                (format t "file not found:~A~%" path)
                (uiop:quit 1))))))))

(export
 (defun latests (args)
   (declare (ignore args))
   (format t "~{~A~%~}" (release-uris))))

(export
 (defun version (args)
   (declare (ignore args))
   (format t "~A~%" (release-tag_name))))

(defvar *sh* nil)
(defvar *var* nil)

(defun optp (arg)
  (when (and arg
             (loop for i across arg
                   repeat 2
                   always (eql i #\-)))
    (subseq arg 2)))

(defun main (&rest argv)
  (loop
    for opt = (optp (first argv))
    while opt
    when opt
    do (setf *var* (acons opt (second argv) *var*)
             argv (cdr argv))
    do (setf argv (cdr argv))
    finally (let ((symbol (read-from-string (if argv
                                                (first argv)
                                                "default"))))
              (when (eql (nth-value 1 (find-symbol (string symbol))) :external)
                (funcall symbol (rest argv)))))
  (format t "~{~A~%~}" (reverse *sh*)))
;;; vim: set ft=lisp lisp:
