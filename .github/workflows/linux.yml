name: linux

on:
  schedule:
    - cron:  '0 1 * * *'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86-64
            lisp: 'sbcl-bin/2.0.0'
            image: 'glibc2.19-sbcl2.0.0'
            docker-platform: 'linux/amd64'
            docker-image-suffix: ''
          - target: x86
            lisp: 'sbcl-bin/2.0.0'
            image: 'glibc2.19-sbcl2.0.0'
            docker-platform: 'linux/amd64'
            docker-image-suffix: ''
          - target: arm64
            lisp: 'sbcl-bin/2.0.0'
            image: 'glibc2.19-sbcl2.0.0'
            docker-platform: 'linux/arm64'
            docker-image-suffix: 'aarch64'
          # with suffix x86-64
          - target: x86-64
            suffix: -glibc2.39
            lisp: sbcl-bin/2.0.0
            image: 'glibc2.39'
            docker-platform: 'linux/amd64'
          - target: x86-64
            suffix: -glibc2.31
            lisp: sbcl-bin/2.0.0
            image: 'glibc2.31-sbcl2.1.4'
            docker-platform: 'linux/amd64'
          - target: x86-64
            suffix: -glibc2.19
            lisp: sbcl-bin/2.0.0
            image: 'glibc2.19-sbcl2.0.0'
            docker-platform: 'linux/amd64'
          - target: x86-64
            suffix: -glibc2.10
            lisp: sbcl-bin/2.0.0
            image: 'glibc2.10-sbcl2.0.5'
            docker-platform: 'linux/amd64'
            linkflags: -lrt
          - target: x86-64
            suffix: -musl
            lisp: sbcl-bin/2.0.0
            image: 'musl1.2.2-sbcl2.0.5'
            docker-platform: 'linux/amd64'
          # with suffix x86
          - target: x86
            suffix: -glibc2.39
            lisp: sbcl-bin/2.0.0
            image: 'glibc2.39'
            docker-platform: 'linux/amd64'
          - target: x86
            suffix: -glibc2.31
            lisp: sbcl-bin/2.0.0
            image: 'glibc2.31-sbcl2.1.4'
            docker-platform: 'linux/amd64'
          - target: x86
            suffix: -glibc2.19
            lisp: sbcl-bin/2.0.0
            image: 'glibc2.19-sbcl2.0.0'
            docker-platform: 'linux/amd64'
          - target: x86
            suffix: -glibc2.10
            lisp: sbcl-bin/2.0.0
            image: 'glibc2.10-sbcl2.0.5'
            docker-platform: 'linux/amd64'
            linkflags: -lrt
          #- target: x86
          #  suffix: -musl
          #  lisp: sbcl-bin/2.0.0
          #  docker-platform: 'linux/386'
          #  image: 'i386-musl1.2.2-sbcl2.0.5'
          - target: x86
            suffix: -musl1.1
            lisp: sbcl-bin/2.0.0
            image: 'i386-musl1.1.24-sbcl2.0.5'
            docker-platform: 'linux/386'
          # with suffix arm64
          - target: arm64
            suffix: -musl
            lisp: sbcl-bin/2.2.0
            image: 'musl1.2.2-sbcl2.0.5'
            docker-platform: 'linux/arm64'
            docker-image-suffix: 'aarch64'
          - target: arm64
            suffix: -glibc2.39
            lisp: sbcl-bin/2.2.0
            image: 'glibc2.39'
            docker-platform: 'linux/arm64'
            docker-image-suffix: 'aarch64'

    environment: SET_VERSION

    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          image: tonistiigi/binfmt:qemu-v8.1.5
      - name: setenv
        run: |
          echo "$HOME/.roswell/bin" >> $GITHUB_PATH
          echo "ROSWELL_BRANCH=release" >> $GITHUB_ENV
      - name: checkenv
        run: |
          uname -s
          uname -m
          echo $ROSWELL_INSTALL_DIR
          echo $ROSWELL_BRANCH
      - name: Install Roswell
        env:
          LISP: ${{ matrix.lisp }}
        run: |
          curl -L https://raw.githubusercontent.com/roswell/roswell/master/scripts/install-for-ci.sh | sh
          ros install snmsts/sn.github
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: docker.pkg.github.com
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: pull or build&push docker image
        env:
          DOCKER_PLATFORM: ${{ matrix.docker-platform }}
          DOCKER_IMAGE_SUFFIX: ${{ matrix.docker-image-suffix }}
          IMAGE: ${{ matrix.image }}
        run: |
          if [ -n "$IMAGE" ]; then
             make pull-docker || make build-docker push-docker
          fi
      - name: build & upload
        env:
          GITHUB_OAUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ secrets.VERSION }}
          ARCH: ${{ matrix.target }}
          IMAGE: ${{ matrix.image }}
          SUFFIX: ${{ matrix.suffix }}
          LINKFLAGS: ${{ matrix.linkflags }}
          DOCKER_PLATFORM: ${{ matrix.docker-platform }}
          DOCKER_IMAGE_SUFFIX: ${{ matrix.docker-image-suffix }}
        run: |
          if [ "$VERSION" = "" ]; then
            make latest-version docker upload-archive;
          else
            make docker upload-archive;
          fi
